"use strict";var e=require("dotenv"),t=require("express"),s=require("cors"),a=require("mongoose"),r=require("yup"),n=require("axios"),o=require("bcrypt"),i=require("jsonwebtoken"),c=require("express-session"),u={},d={},l={};const{string:g,object:p}=r;l.authInput=p({email:g().required(),password:g().min(4).max(8)}),l.newUserInput=p({username:g().required(),password:g().min(4).max(8),email:g().email().required(),fullname:g().required()});var h={},m={};const{Schema:w,model:y}=a,_=new w({username:String,fullname:String,email:{type:String,unique:!0},password:String,avatar:String,created_at:{type:Date,default:()=>Date.now()},updated_at:{type:Date,default:()=>Date.now()}});m.User=y("User",_);var v={};const U=o;v.encrypt=async e=>{const t=await U.genSalt(10);return await U.hash(e,t)},v.compare=async(e,t)=>await U.compare(e,t);const f=n,{User:b}=m,{compare:E}=v,G=(e,t)=>`${e}?${new URLSearchParams(t).toString()}`;h.login=async(e,t)=>{const s=await b.findOne({email:e});if(!s)throw Error("User not found");if(t){if(!await E(t,s.password))throw Error("Wrong password")}return s},h.getGoogleConsentUrl=()=>G("https://accounts.google.com/o/oauth2/v2/auth",{client_id:process.env.GOOGLE_CLIENT_ID,redirect_uri:process.env.GOOGLE_REDIRECT_URI,access_type:"offline",prompt:"consent",response_type:"code",scope:["https://www.googleapis.com/auth/userinfo.profile","https://www.googleapis.com/auth/userinfo.email"].join(" ")});h.getGoogleUser=async e=>{const{id_token:t,access_token:s}=await(async e=>{const t=G("https://oauth2.googleapis.com/token",{code:e,client_id:process.env.GOOGLE_CLIENT_ID,client_secret:process.env.GOOGLE_CLIENT_SECRET,redirect_uri:process.env.GOOGLE_REDIRECT_URI,grant_type:"authorization_code"});return(await f({method:"POST",url:t})).data})(e),a=G("https://www.googleapis.com/oauth2/v1/userinfo",{alt:"json",access_token:s}),r=await f({method:"GET",url:a,headers:{Authorization:`Bearer ${t}`}}),{email:n,name:o,given_name:i,picture:c}=r.data;return{email:n,fullname:o,username:i,avatar:c}},h.getGithubConsentUrl=()=>G("https://github.com/login/oauth/authorize",{client_id:process.env.GITHUG_CLIENT_ID});h.getGithubUser=async e=>{const{access_token:t}=await(async e=>{const t=G("https://github.com/login/oauth/access_token",{client_id:process.env.GITHUG_CLIENT_ID,client_secret:process.env.GITHUB_CLIENT_SECRET,code:e});return(await f({method:"POST",url:t,headers:{Accept:"application/json"}})).data})(e),s=await f({method:"GET",url:"https://api.github.com/user",headers:{Authorization:`Bearer ${t}`}}),{login:a,email:r,name:n,avatar_url:o}=s.data;return{username:a,email:r,fullname:n,avatar:o}};var q={};const I=i;q.signToken=e=>I.sign(e,process.env.PRIVATE_KEY),q.generateUserToken=e=>(void 0).signToken({username:e.username,email:e.email,fullname:e.fullname,avatar:e.avatar});var T={};const{User:O}=m;T.findAndCreateUser=async(e,t)=>{if(await O.findOne(e))throw Error("User already exist");const s=new O(t);return await s.save()},T.findAndUpdateUser=async(e,t)=>O.findOneAndUpdate(e,t,{upsert:!0,new:!0});const{authInput:C,newUserInput:k}=l,{getGoogleConsentUrl:R,getGithubConsentUrl:S,login:L,getGithubUser:D,getGoogleUser:$}=h,{encrypt:A}=v,{generateUserToken:x}=q,{findAndCreateUser:N}=T;d.github=async(e,t)=>{if(e.query.redirect&&(e.session.client=e.query.redirect),e.query.code)try{const s=await D(e.query.code),a=x(s);return t.redirect(`${e.session.client}?token=${a}`)}catch(e){return t.status(404).send(e.message)}return t.redirect(S())},d.google=async(e,t)=>{if(e.query.redirect&&(e.session.client=e.query.redirect),e.query.code)try{const s=await $(e.query.code),a=x(s);return t.redirect(`${e.session.client}?token=${a}`)}catch(e){return t.status(404).send(e.message)}return t.redirect(R())},d.login=async(e,t)=>{await C.validate(e.body).then((async()=>{if(null===e.body.oauth&&null===e.body.password)return t.status(404).send("password is required");let s=await L(e.body.email);e.body.oauth&&(s=await L(e.body.email,e.body.password));const a=x(s);return t.send(a)})).catch((e=>t.status(500).send(e.message)))},d.signup=async(e,t)=>{await k.validate(e.body).then((async()=>{const s=e.body.oauth&&await A(e.body.password),a={...e.body,password:s},r=await N({email:e.body.email},a),n=x(r);return t.send(n)})).catch((e=>t.status(500).send(e.message)))};const j=t,{github:z,google:P,login:B,signup:H}=d,K=j.Router();K.get("/github",z),K.get("/google",P),K.post("/login",B),K.post("/signup",H),u.auth=K,e.config();const M=t,V=s,W=a,{auth:Y}=u,F=c,J=M(),Q=process.env.PORT||4e3;J.use(M.json()),J.use(V()),J.use(F({secret:"auth-session",resave:!1,saveUninitialized:!1})),J.use("/auth",Y);(async()=>{await W.connect(process.env.MONGODB_URI).then((()=>{console.log("db connected successfuly"),J.listen(Q,(()=>console.log(`server is running on port ${Q}`)))})).catch((e=>{console.log(e)}))})(),module.exports={};
